<!DOCTYPE html>
<html>
    <head>
      <meta charset="utf-8">
      <title>Configuration du pont tournant</title>
      <link rel="stylesheet" href="style.css" type="text/css" />
      <script type="text/javascript">
        var ctx = 0;
        var canvas = 0;
        var lastAngle = 0;
        var trackCount = 0;
        var trackAngle = [-1.0];
        var imageOffsetAngle = 0;
        var radius = 0;
        var startEventsPending = false;

        function loadSettings(loadHtml) {
            trackAngle = [-1.0];
            const req = new XMLHttpRequest();
            req.onreadystatechange = function() {
                if (req.readyState === 4 && req.status == "200") {
                    jsonData = req.response;
                    for (var key in jsonData){
                        if (loadHtml) {
                            if (document.getElementById(key) != null) {
                                if (key.substring(0,1) == "a" && key.length <= 3) {
                                    document.getElementById(key).value = roundOf(jsonData[key],1)+"°";
                                } else if (key.substring(0,5) == "trace" || key.substring(0,6) == "enable") {
                                    document.getElementById(key).checked = (String(jsonData[key]).toLowerCase() == "true");
                                } else {
                                    dataValue = jsonData[key];
                                    if (typeof(dataValue) == "number" && !Number.isInteger(dataValue)) {
                                        dataValue = roundOf(dataValue, 1);
                                    }
                                    dataType = document.getElementById(key).nodeName;
                                    if (dataType == "INPUT") {
                                        document.getElementById(key).value = dataValue;
                                    } else {
                                        document.getElementById(key).innerHTML = dataValue;
                                    }
                                }
                            } else {
                                console.log("Can't find "+key+" in document");
                            }
                        }
                        if (key == "trackCount") {
                            trackCount = jsonData[key];
                            if (loadHtml) {
                                for (let i = 1; i <= 36; i++) {
                                    document.getElementById("l"+i).hidden = (i > trackCount);
                                }
                            }
                        }
                        if (key.substring(0,1) == "a" && key.length <= 3) {
                            trackAngle.push(jsonData[key]);
                        }
                        if (key == "radius") {
                            radius = parseFloat(jsonData[key]);
                        }
                        if (key == "imageOffsetAngle") {
                            imageOffsetAngle = parseFloat(jsonData[key]);
                        }
                    };
                    loadCanvas();
                }
            }
            req.responseType = "json";
            req.open("GET", "settings.json");
            req.send();
        }

        function loadCanvas() {
            canvas = document.getElementById("cvs");
            if (canvas.getContext) {
            ctx = canvas.getContext("2d");
            let img = new Image();
            img.onload = function () {
                ctx.canvas.width = img.width;
                ctx.canvas.height = img.height;
                ctx.drawImage(img, 0, 0);
                turn(lastAngle);
            };
            img.src = "imagePont.png";
            }
        }

        function drawCircles() {
            var w = 32;
            var imgWidth = ctx.canvas.width;
            var imgHeight = ctx.canvas.height;
            for (let i = 1; i <= trackCount; i++) {
                var angle = parseFloat(trackAngle[i]);
                var x = (radius / 100.0 * Math.cos(angle * Math.PI / 180.0) * imgHeight) + (imgHeight / 2.0);
                var y = (-radius / 100.0 * Math.sin(angle * Math.PI / 180.0) * imgHeight) + (imgHeight / 2.0);
                ctx.save();
                ctx.beginPath();
                ctx.fillStyle = "rgb(200,0,0)";
                ctx.arc(x, y, w/2, 0, 2.0 * Math.PI);
                ctx.fill();
                ctx.stroke();
                ctx.font = (w/2)+'pt Calibri';
                ctx.fillStyle = 'white';
                ctx.textAlign = 'center';
                ctx.fillText(i, x, y+(w/4));
                ctx.restore();
            }
        }

        function initAll() {
            loadSettings(true);
            startEvents();
        }

        function sendLocationPct(event) {
            var img = ctx.canvas;
            var pct_x = Math.round((event.clientX - img.offsetLeft) * 1000 / img.clientWidth) / 10;
            var pct_y = Math.round((event.clientY - img.offsetTop) * 1000 / img.clientHeight) / 10;
            data = pct_x + "/" + pct_y
            const req = new XMLHttpRequest();
    		req.open("GET", location.origin+'/pos/'+data);
		    req.send();
        }

        function startEvents(){						// Connecter les évènements et definir les fonctions liées
            var es = new EventSource('/events');	// Connexion
            startEventsPending = false;
            es.onopen = function(e) {				// Exécuté à l'ouverture de la connexion
                console.log("Events opened");
            };
            es.onerror = function(e) {				// Exécuté en cas d'erreur
                if (e.target.readyState != EventSource.OPEN) {
                    console.log("Events closed");
                    if (!startEventsPending) {
                        setTimeout(startEvents, 5000);
                        startEventsPending = true;
                    }
                }
            };
            es.addEventListener('angle', function(e) {	// Exécuté à la récéption d'un message de type 'angle'
                console.log("Angle: "+ e.data);
                lastAngle = parseFloat(e.data);
                document.getElementById("angle").innerHTML = roundOf(lastAngle,1);
                turn(lastAngle);
            });
            es.addEventListener('settings', function(e) {   // Exécuté à la récéption d'un message de type 'settings'
                console.log("Settings: "+ e.data);
                loadSettings(true);
            });
        }

        function turn(angle) {
            let img2 = new Image();
            angle -= imageOffsetAngle;
            img2.onload = function () {
                ctx.save();
                ctx.translate((ctx.canvas.width/2), (ctx.canvas.height/2));
                ctx.rotate((Math.PI / 180) * angle);
                ctx.translate(-(ctx.canvas.width/2), -(ctx.canvas.height/2));
                ctx.drawImage(img2, canvas.width/2 - img2.width/2, canvas.height/2 -img2.height/2, img2.width, img2.height);
                ctx.restore();
                drawCircles();
            };
            img2.src = "plaque.png";
        }

        function move(steps){
            const req = new XMLHttpRequest();
            req.open("GET", location.origin+'/move/'+steps);
            req.send();
        }

        function setImageReference() {
            const req = new XMLHttpRequest();
            req.open("GET", location.origin+'/imgref');
            req.send();
        }

        function moveToTrack(track) {
            const req = new XMLHttpRequest();
            req.open("GET", location.origin+'/goto/'+track);
            req.send();
        }

        function setAngle(line) {
            console.log("Set angle "+line);
            const req = new XMLHttpRequest();
            req.open("GET", location.origin+'/setangle/'+line);
            req.send();
        }

        function changed(object) {
            console.log("Set changed "+object.id);
            const req = new XMLHttpRequest();
            if (object.id.substring(0,5) == "trace" || object.id.substring(0,6) == "enable") {
                req.open("GET", location.origin+'/changed/'+object.id+"/"+object.checked);
            } else {
                req.open("GET", location.origin+'/changed/'+object.id+"/"+object.value);
            }
            req.send();
        }

        function roundOf(n, p) {
            const n1 = n * Math.pow(10, p + 1);
            const n2 = Math.floor(n1 / 10);
            if (n1 >= (n2 * 10 + 5)) {
                return (n2 + 1) / Math.pow(10, p);
            }
            return n2 / Math.pow(10, p);
        }
    </script>
    </head>
    <body onload="initAll();">
        <div>
            <canvas id="cvs" width="600" height="600" onmouseup="sendLocationPct(event);">Your browser doesn't support canvas</canvas>
        </div>
        <div>
            <hr />
            Angle de rotation : <span id="angle"></span>&deg;<br>
            <hr />
            <input type="button" style="width:75px" value="+1" onclick="move(1);"/>
            <input type="button" style="width:75px" value="+5" onclick="move(5);"/>
            <input type="button" style="width:75px" value="+10" onclick="move(10);"/>
            <input type="button" style="width:75px" value="+50" onclick="move(50);"/>
            <input type="button" style="width:75px" value="+100" onclick="move(100);"/>
            <input type="button" style="width:75px" value="+500" onclick="move(500);"/>
            <br>
            <input type="button" style="width:75px" value="-1" onclick="move(-1);"/>
            <input type="button" style="width:75px" value="-5" onclick="move(-5);"/>
            <input type="button" style="width:75px" value="-10" onclick="move(-10);"/>
            <input type="button" style="width:75px" value="-50" onclick="move(-50);"/>
            <input type="button" style="width:75px" value="-100" onclick="move(-100);"/>
            <input type="button" style="width:75px" value="-500" onclick="move(-500);"/>
            <hr />
            Rotation image sur voie 1 : <span id="imageOffsetAngle"></span>&deg;<br><br>
            <input type="button" style="width:470px" value="Calage image sur voie 1" onclick="setImageReference();"/>
            <hr />
            Nombre de voies : <input type="number" id="trackCount" min=2 max=36 style="width:60px" onchange="changed(this);" /><br>
            <hr />
            <table>
                <tr><th>Voie</th><th>Angle</th><th>D&eacute;finition</th></tr>
                <tr id="l1"><td>1</td><td><input type="button" style="width:75px" value="xxx.x" id="a1" onclick="moveToTrack(1);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(1);"/></td></tr>
                <tr id="l2"><td>2</td><td><input type="button" style="width:75px" value="xxx.x" id="a2" onclick="moveToTrack(2);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(2);"/></td></tr>
                <tr id="l3"><td>3</td><td><input type="button" style="width:75px" value="xxx.x" id="a3" onclick="moveToTrack(3);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(3);"/></td></tr>
                <tr id="l4"><td>4</td><td><input type="button" style="width:75px" value="xxx.x" id="a4" onclick="moveToTrack(4);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(4);"/></td></tr>
                <tr id="l5"><td>5</td><td><input type="button" style="width:75px" value="xxx.x" id="a5" onclick="moveToTrack(5);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(5);"/></td></tr>
                <tr id="l6"><td>6</td><td><input type="button" style="width:75px" value="xxx.x" id="a6" onclick="moveToTrack(6);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(6);"/></td></tr>
                <tr id="l7"><td>7</td><td><input type="button" style="width:75px" value="xxx.x" id="a7" onclick="moveToTrack(7);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(7);"/></td></tr>
                <tr id="l8"><td>8</td><td><input type="button" style="width:75px" value="xxx.x" id="a8" onclick="moveToTrack(8);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(8);"/></td></tr>
                <tr id="l9"><td>9</td><td><input type="button" style="width:75px" value="xxx.x" id="a9" onclick="moveToTrack(9);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(9);"/></td></tr>
                <tr id="l10"><td>10</td><td><input type="button" style="width:75px" value="xxx.x" id="a10" onclick="moveToTrack(10);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(10);"/></td></tr>
                <tr id="l11"><td>11</td><td><input type="button" style="width:75px" value="xxx.x" id="a11" onclick="moveToTrack(11);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(11);"/></td></tr>
                <tr id="l12"><td>12</td><td><input type="button" style="width:75px" value="xxx.x" id="a12" onclick="moveToTrack(12);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(12);"/></td></tr>
                <tr id="l13"><td>13</td><td><input type="button" style="width:75px" value="xxx.x" id="a13" onclick="moveToTrack(13);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(13);"/></td></tr>
                <tr id="l14"><td>14</td><td><input type="button" style="width:75px" value="xxx.x" id="a14" onclick="moveToTrack(14);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(14);"/></td></tr>
                <tr id="l15"><td>15</td><td><input type="button" style="width:75px" value="xxx.x" id="a15" onclick="moveToTrack(15);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(15);"/></td></tr>
                <tr id="l16"><td>16</td><td><input type="button" style="width:75px" value="xxx.x" id="a16" onclick="moveToTrack(16);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(16);"/></td></tr>
                <tr id="l17"><td>17</td><td><input type="button" style="width:75px" value="xxx.x" id="a17" onclick="moveToTrack(17);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(17);"/></td></tr>
                <tr id="l18"><td>18</td><td><input type="button" style="width:75px" value="xxx.x" id="a18" onclick="moveToTrack(18);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(18);"/></td></tr>
                <tr id="l19"><td>19</td><td><input type="button" style="width:75px" value="xxx.x" id="a19" onclick="moveToTrack(19);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(19);"/></td></tr>
                <tr id="l20"><td>20</td><td><input type="button" style="width:75px" value="xxx.x" id="a20" onclick="moveToTrack(20);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(20);"/></td></tr>
                <tr id="l21"><td>21</td><td><input type="button" style="width:75px" value="xxx.x" id="a21" onclick="moveToTrack(21);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(21);"/></td></tr>
                <tr id="l22"><td>22</td><td><input type="button" style="width:75px" value="xxx.x" id="a22" onclick="moveToTrack(22);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(22);"/></td></tr>
                <tr id="l23"><td>23</td><td><input type="button" style="width:75px" value="xxx.x" id="a23" onclick="moveToTrack(23);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(23);"/></td></tr>
                <tr id="l24"><td>24</td><td><input type="button" style="width:75px" value="xxx.x" id="a24" onclick="moveToTrack(24);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(24);"/></td></tr>
                <tr id="l25"><td>25</td><td><input type="button" style="width:75px" value="xxx.x" id="a25" onclick="moveToTrack(25);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(25);"/></td></tr>
                <tr id="l26"><td>26</td><td><input type="button" style="width:75px" value="xxx.x" id="a26" onclick="moveToTrack(26);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(26);"/></td></tr>
                <tr id="l27"><td>27</td><td><input type="button" style="width:75px" value="xxx.x" id="a27" onclick="moveToTrack(27);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(27);"/></td></tr>
                <tr id="l28"><td>28</td><td><input type="button" style="width:75px" value="xxx.x" id="a28" onclick="moveToTrack(28);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(28);"/></td></tr>
                <tr id="l29"><td>29</td><td><input type="button" style="width:75px" value="xxx.x" id="a29" onclick="moveToTrack(29);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(29);"/></td></tr>
                <tr id="l30"><td>30</td><td><input type="button" style="width:75px" value="xxx.x" id="a30" onclick="moveToTrack(30);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(30);"/></td></tr>
                <tr id="l31"><td>31</td><td><input type="button" style="width:75px" value="xxx.x" id="a31" onclick="moveToTrack(31);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(31);"/></td></tr>
                <tr id="l32"><td>32</td><td><input type="button" style="width:75px" value="xxx.x" id="a32" onclick="moveToTrack(32);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(32);"/></td></tr>
                <tr id="l33"><td>33</td><td><input type="button" style="width:75px" value="xxx.x" id="a33" onclick="moveToTrack(33);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(33);"/></td></tr>
                <tr id="l34"><td>34</td><td><input type="button" style="width:75px" value="xxx.x" id="a34" onclick="moveToTrack(34);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(34);"/></td></tr>
                <tr id="l35"><td>35</td><td><input type="button" style="width:75px" value="xxx.x" id="a35" onclick="moveToTrack(35);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(35);"/></td></tr>
                <tr id="l36"><td>36</td><td><input type="button" style="width:75px" value="xxx.x" id="a36" onclick="moveToTrack(36);" /></td><td><input type="button" style="width:50 px" value="<--" onclick="setAngle(36);"/></td></tr>
            </table>
            <hr />
            Degr&eacute; par pas : <input type="number" id="degreesPerStep" step=0.01 min=0 max=360 style="width:60px" onchange="changed(this);" /><br>
            Micropas par pas : <input type="number" id="microStepsPerStep" min=1 max=256 style="width:60px" onchange="changed(this);" /><br>
            &micro;s entre commandes : <input type="number" id="driverMinimalMicroSec" min=1 max=100 style="width:60px" onchange="changed(this);" /><br>
            Tours par minute du pont : <input type="number" id="requiredRPM" step=0.1 min=0 max=6 style="width:60px" onchange="changed(this);" /><br>
            <hr />
            <input type="checkbox" id="enableEncoder" onchange="changed(this);" />&nbsp;Utiliser l'encodeur<br>
            Numéro de l'esclave : <input type="number" id="slaveId" min=0 max=255 style="width:60px" onchange="changed(this);" /><br>
            Numéro du registre : <input type="number" id="regId" min=0 max=255 style="width:60px" onchange="changed(this);" /><br>
            Angle de l'encodeur : <span id="encoderOffsetAngle"></span>&deg;<br>
            <hr />
            Rayon des zones sensibles : <input type="number" id="radius" min=10 max=55 style="width:60px" onchange="changed(this);" /><br>
            Largeur des zones sensibles : <input type="number" id="maxDelta" min=1 max=10 style="width:60px" onchange="changed(this);" /><br>
            <hr />
            <input type="checkbox" id="enableSound" onchange="changed(this);" />&nbsp;Activer le son<br>
            Volume sonore : <input type="number" id="soundVolume" min=1 max=30 style="width:60px" onchange="changed(this);" /><br>
            Index son avant rotation : <input type="number" id="beforeSoundIndex" min=0 max=256 style="width:60px" onchange="changed(this);" /><br>
            Durée son avant rotation (s) : <input type="number" id="beforeSoundDuration" min=0.1 max=10 step=0.1 style="width:60px" onchange="changed(this);" /><br>
            Index son pendant rotation : <input type="number" id="moveSoundIndex" min=0 max=256 style="width:60px" onchange="changed(this);" /><br>
            Index son apr&egrave;s rotation : <input type="number" id="afterSoundIndex" min=0 max=256 style="width:60px" onchange="changed(this);" /><br>
            Durée son apr&egrave;s rotation (s) : <input type="number" id="afterSoundDuration" min=0.1 max=10 step=0.1 style="width:60px" onchange="changed(this);" /><br>
            <hr />
            SSID Wifi : <input type="text" id="ssid" maxlen=32 size=32 onchange="changed(this);" /><br>
            Mot de passe : <input type="text" id="pwd" maxlen=32 size=32 onchange="changed(this);" /><br>
            Nom du module : <input type="text" id="name" maxlen=32 size=32 onchange="changed(this);" /><br>
            <input type="checkbox" id="traceCode" onchange="changed(this);" />&nbsp;Affichage des traces du code<br>
            <input type="checkbox" id="traceDebug" onchange="changed(this);" />&nbsp;Affichage des traces des modules<br>
            <hr />
        </div> 
    </body>
</html>